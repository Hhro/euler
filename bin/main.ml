open Euler
open Euler.Util

let chall_1 =
  let rec solve i =
    if i >= 1000 then 0
    else if i mod 3 = 0 || i mod 5 = 0 then i + solve (i + 1)
    else solve (i + 1)
  in
  solve 3

let chall_2 =
  let rec solve res a b i =
    if b > 4000000 then res
    else if i mod 3 = 1 then solve (res + b) b (a + b) (i + 1)
    else solve res b (a + b) (i + 1)
  in
  solve 0 1 2 1

let chall_3 =
  let rec solve n i =
    if i * i > n then n
    else if n mod i = 0 then solve (n / i) i
    else solve n (i + 1)
  in
  solve 600851475143 2

let chall_4 =
  let rec solve i j res =
    if i < 500 then res
    else if j < 100 then solve (i - 1) 999 res
    else
      let prod = i * j in
      if
        prod > res
        && prod = (prod |> string_of_int |> String.rev |> int_of_string)
      then solve i (j - 1) prod
      else solve i (j - 1) res
  in
  solve 999 999 0

let chall_5 = Math.lcm (List.range 1 21)

let chall_6 = 100 * 101 * 302 * 99 / 12

let chall_7 =
  let rec solve cnt n =
    if cnt = 200000 then n - 2
    else n + 2 |> if Math.is_prime n then solve (cnt + 1) else solve cnt
  in
  solve 1 3

let chall_8 =
  let series =
    "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
  in
  let rec solve res i =
    if i > 1000 - 13 then res
    else
      let n =
        String.sub series i 13
        |> String.fold_left (fun acc c -> (Char.code c - 0x30) * acc) 1
      in
      solve (max res n) (i + 1)
  in
  solve 0 0

let () = chall_8 |> string_of_int |> print_endline
